<% if (asDIProvider && diLibs === "TypeDI" && !higherOrder) { -%>
import { Service } from "typedi";
<% } -%>
<% if (asDIProvider && diLibs === "Inversify" && !higherOrder) { -%>
import { injectable } from "inversify";
<% } -%>

<% if (useFunctional && !higherOrder) { -%>
import { MiddlewareFn, ResolverData, NextFn } from "type-graphql";
<% } -%>
<% if (higherOrder) { -%>
import { UseMiddleware, ResolverData, NextFn } from "type-graphql";
<% } -%>
<% if (!useFunctional && !higherOrder) { -%>
import { MiddlewareInterface, ResolverData, NextFn } from "type-graphql";
<% } -%>

<% if (useFunctional && !higherOrder) { -%>
const <%= middlewareName %>Middleware: MiddlewareFn = async (
  { root, args, context, info }: ResolverData,
  next: NextFn
) => {
  await next();
};

export default <%= middlewareName %>Middleware;
<% } -%>

<% if (!useFunctional && !higherOrder) { -%>
<% if (asDIProvider && diLibs === "TypeDI" && !higherOrder) { -%>
@Service()
<% } -%>
<% if (asDIProvider && diLibs === "Inversify" && !higherOrder) { -%>
@injectable()
<% } -%>
export default class <%= middlewareName %>Middleware implements MiddlewareInterface {
  async use({ root, args, context, info }: ResolverData, next: NextFn) {
    return await next();
  }
}
<% } -%>


<% if (higherOrder) { -%>
const <%= camelCaseMiddlewareName %> = () => {
  return UseMiddleware(({ root, args, context, info }: ResolverData, next: NextFn) => {

    return next();
  });
};

export default <%= camelCaseMiddlewareName %>;
<% } -%>
